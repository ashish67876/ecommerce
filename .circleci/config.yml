version: 2.1
#orbs:
#  sonarscanner: psl/sonarscanner@0.0.4
jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:19.0.1
    # Specify the number of parallel containers you want (adjust as needed)
    parallelism: 8
    working_directory: ~/repo
    steps:
      - checkout

      # Restore Maven cache to speed up subsequent builds
      - restore_cache:
          keys:
            - maven-{{ checksum "pom.xml" }}
            - maven-

      # Build & Test Microservices distributed across parallel nodes
      - run:
          name: Build and Test Microservices
          command: |
            # Define the list of microservices
            SERVICES=(ApiGateway AuthService CartService InventoryService OrderService PaymentService ProductService ServiceRegistry)
            echo "Running on node index ${CIRCLE_NODE_INDEX} of ${CIRCLE_NODE_TOTAL}"
            PROCESSED=""
            # Distribute services by using modulo arithmetic on the index
            for i in "${!SERVICES[@]}"; do
              if (( i % CIRCLE_NODE_TOTAL == CIRCLE_NODE_INDEX )); then
                service=${SERVICES[i]}
                echo "Processing service: $service"
                # Remove test directories if not needed for the build step
                rm -rf "$service/src/test"
                cd "$service"
                echo "Building and packaging $service"
                mvn -B -DskipTests clean package
                echo "Running tests for $service"
                mvn test
                cd ..
                PROCESSED="$PROCESSED $service"
              fi
            done
            echo "Services processed on this node: $PROCESSED"
            # Save the list of processed services for later artifact collection
            echo "$PROCESSED" > processed_services.txt

      # Copy build artifacts from processed services into a node-specific folder
      - run:
          name: Persist Artifacts
          command: |
            mkdir -p artifacts/${CIRCLE_NODE_INDEX}
            for service in $(cat processed_services.txt); do
              if [ -d "$service/target" ]; then
                cp -r "$service/target" "artifacts/${CIRCLE_NODE_INDEX}/${service}_target"
              fi
            done

      - save_cache:
          key: maven-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2

      - persist_to_workspace:
          root: .
          paths:
            - artifacts

  sonarcloud-analysis:
    docker:
      - image: cimg/openjdk:19.0.1
    working_directory: ~/repo
    steps:
      - checkout
      # Attach the merged workspace (which now contains artifacts from all nodes)
      - attach_workspace:
          at: .
      - run:
          name: Install Sonarqube scanner 
          command: |
            sudo apt-get update
            wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip sonar-scanner.zip
            rm sonar-scanner.zip
      - run:
          name: Run SonarScanner
          command: |
              # Force the usage of the java on the PATH (which should be Java 19)
              export SONAR_SCANNER_JAVA_CMD=$(which java)
              echo "Using Java version:"
              java -version  # Confirm the correct Java version is being used
      
              # Add SonarScanner to PATH and run the scanner
              export PATH="$PATH:$PWD/sonar-scanner-4.6.2.2472-linux/bin"
              sonar-scanner \
                -Dsonar.projectKey=$CIRCLE_BRANCH:$CIRCLE_PROJECT_REPONAME \
                -Dsonar.host.url=https://sonarcloud.io/ \
                -Dsonar.login=$SONAR_TOKEN

  jfrog-upload:
    docker:
      - image: cimg/openjdk:19.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install JFrog CLI
          command: |
            echo "Installing JFrog CLI..."
            curl -fL https://getcli.jfrog.io | sh
            chmod +x jfrog
            sudo mv jfrog /usr/local/bin/
      - run:
          name: Upload Artifacts to JFrog Artifactory
          command: |
            for d in artifacts/*; do
              if [ -d "$d" ]; then
                for target in "$d"/*; do
                  # Extract the service name from the folder name
                  service=$(basename "$target" | sed 's/_target//')
                  echo "Uploading artifact for service: $service"
                  jfrog rt upload "$target/*.jar" "my-repo/${service}/"
                done
              fi
            done

workflows:
  version: 2
  build_test_sonar_jfrog:
    jobs:
      - build-and-test
      - sonarcloud-analysis:
          requires:
            - build-and-test
      - jfrog-upload:
          requires:
            - build-and-test
