version: 2.1

orbs:
  sonarscanner: psl/sonarscanner@0.0.4

# Define a list of services as an anchor for reuse
x-services: &services
  - ApiGateway
  - AuthService
  - CartService
  - InventoryService
  - OrderService
  - PaymentService
  - ProductService
  - ServiceRegistry

jobs:
  build-and-test:
    docker:
      - image: cimg/openjdk:19.0.1
    working_directory: ~/repo
    steps:
      - checkout

      # Restore Maven cache (adjust the key if you prefer a combined checksum for multiple poms)
      - restore_cache:
          keys:
            - maven-{{ checksum "pom.xml" }}
            - maven-

      # Delete all test directories using a loop
      - run:
          name: Delete Test Directories
          command: |
            echo "Deleting test directories..."
            for service in ${*//\n/ } <<EOF
            $(echo <<SERVICES>> | tr '\n' ' ')
            EOF
            do
              echo "Deleting $service/src/test"
              rm -rf "$service/src/test"
            done
            echo "Test directories deleted successfully."
          # Alternatively, if the above variable expansion seems complex, you can hardcode:
          # for service in ApiGateway AuthService CartService InventoryService OrderService PaymentService ProductService ServiceRegistry; do
          #   rm -rf "$service/src/test"
          # done

      # Build & Test each microservice using a loop
      - run:
          name: Build & Test All Services
          command: |
            for service in ApiGateway AuthService CartService InventoryService OrderService PaymentService ProductService ServiceRegistry; do
              echo "--------------------------------------------------"
              echo "Building & Packaging $service"
              cd "$service"
              mvn -B -DskipTests clean package
              echo "Running tests for $service"
              mvn test
              cd ..
            done

      # Save Maven cache
      - save_cache:
          key: maven-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2

      # Persist build artifacts for downstream jobs
      - persist_to_workspace:
          root: .
          paths:
            - ApiGateway/target
            - AuthService/target
            - CartService/target
            - InventoryService/target
            - OrderService/target
            - PaymentService/target
            - ProductService/target
            - ServiceRegistry/target

  sonarcloud-analysis:
    docker:
      - image: cimg/openjdk:19.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Use the SonarScanner orb command (this replaces manual installation)
      - sonarscanner/scan:
          project-key: "${CIRCLE_BRANCH}:${CIRCLE_PROJECT_REPONAME}"
          host-url: "https://sonarcloud.io"
          login: "${SONAR_TOKEN}"

  jfrog-upload:
    docker:
      - image: cimg/openjdk:19.0.1
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install JFrog CLI
          command: |
            echo "Installing JFrog CLI..."
            curl -fL https://getcli.jfrog.io | sh
            chmod +x jfrog
            sudo mv jfrog /usr/local/bin/
      - run:
          name: Configure JFrog CLI
          command: |
            jfrog rt config --url="${JFROG_URL}" --user="${JFROG_USER}" --password="${JFROG_PASSWORD}" --interactive=false
      - run:
          name: Upload Artifacts
          command: |
            for service in ApiGateway AuthService CartService InventoryService OrderService PaymentService ProductService ServiceRegistry; do
              echo "Uploading artifacts for $service"
              jfrog rt upload "$service/target/*.jar" "my-repo/$service/"
            done
            echo "Artifacts uploaded successfully."

workflows:
  version: 2
  build_test_sonar_jfrog:
    jobs:
      - build-and-test
      - sonarcloud-analysis:
          requires:
            - build-and-test
      - jfrog-upload:
          requires:
            - build-and-test
