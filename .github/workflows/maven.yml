name: CI Workflow

on:
  push:
    branches:
      - main

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.5-openjdk-17

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven
        run: |
          chmod +x build-maven.sh
          ./build-maven.sh

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: target/*.jar

  upload-to-jfrog:
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:  
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: target/

      - name: Install JFrog CLI
        run: |
          curl -fL https://install-cli.jfrog.io | sh
          echo "$HOME/.jfrog/bin" >> $GITHUB_PATH

      - name: Configure JFrog CLI
        run: |
          jf c add myplatform --url ${{ secrets.JFROG_URL }} --access-token ${{ secrets.JFROG_ACCESS_TOKEN }} --interactive=false
          jf c use myplatform

      - name: Upload JAR to JFrog
        run: jf rt upload "target/*.jar" linkinpark-libs-release/

  build-push-scan-docker:
    runs-on: ubuntu-latest
    needs: upload-to-jfrog
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: target/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }}
          echo "Building image for $IMAGE_NAME"
          docker build -t $IMAGE_NAME --build-arg JAR_FILE=target/*.jar .
          docker push $IMAGE_NAME

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }}
          severity: 'HIGH,CRITICAL'
          exit-code: 1
          ignore-unfixed: true
