name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: maven-

      - name: Build Artifact
        run: mvn clean package -DskipTests

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/*.jar

  setup-jfrog-cli:
    name: Setup JFrog CLI
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Jar Artifact
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact
          path: target/

      - name: Install JFrog CLI
        run: |
          curl -fL https://install-cli.jfrog.io | sh
          echo "$HOME/.jfrog/bin" >> $GITHUB_PATH

      - name: Configure JFrog CLI
        run: |
          jf c add myplatform --url ${{ secrets.JFROG_URL }} --access-token ${{ secrets.JFROG_ACCESS_TOKEN }} --interactive=false
          jf c use myplatform
          jf rt upload "target/*.jar" linkinpark-libs-release/

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: setup-jfrog-cli
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }} .
          
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }}

  trivy-scan:
    name: Scan with Trivy
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ github.run_number }}"
          severity: "HIGH,CRITICAL"
          exit-code: 1
          ignore-unfixed: true
          format: table

