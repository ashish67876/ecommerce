name: ProductService CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'ProductService/**'

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('ProductService/pom.xml') }}
          restore-keys: |
            maven-

      - name: Build with Maven
        run: |
          cd ProductService
          mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: productservice-jar
          path: ProductService/target/*.jar

  sonar-scan:
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        with:
          projectBaseDir: ProductService

  docker-build-push:
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: productservice-jar
          path: ProductService/target

      - name: Docker Build & Push
        uses: docker/build-push-action@v5
        with:
          context: ./ProductService
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/productservice:${{ github.run_number }}
          build-args: JAR_FILE=target/*.jar

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/productservice:${{ github.run_number }}
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

  upload-to-jfrog:
    runs-on: ubuntu-latest
    needs: build-artifact
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: productservice-jar
          path: ProductService/target

      - name: Install JFrog CLI
        run: |
          curl -fL https://install-cli.jfrog.io | sh
          export PATH=$PATH:$HOME/.jfrog/bin

      - name: Configure JFrog CLI
        run: |
          jf c add myplatform --url ${{ secrets.JFROG_URL }} --access-token ${{ secrets.JFROG_ACCESS_TOKEN }} --interactive=false
          jf rt upload "ProductService/target/*.jar" linkinpark-libs-release/

